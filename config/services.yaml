# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    reset_fixture: '%env(RESET_FIXTURE)%'
    env(UPLOAD_FOLDER): '/medias/images/'
    env(MERCURE_JWT_PASSPHRASE): 'somepasstochange'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        public: false
        bind:
            $logger: '@logger'
            $uploadFolder: '%kernel.project_dir%%env(UPLOAD_FOLDER)%'


    #            $root_dir: '%kernel.project_dir%'
    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{DependencyInjection,Entity,Migrations,Tests,Kernel.php}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        autowire: true
        tags: ['controller.service_arguments']


    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    App\Repository\:
        resource: '../src/Repository'

    App\Security\:
        resource: '../src/Security/*'
        autowire: true
        public: true

    App\Utils\:
        resource: '../src/Utils/*'
        exclude: '../src/Utils/{ParamConverter,Exceptions}'
        autowire: true
        public: true

    App\Utils\Faker\Provider\DateTimeModifyProvider:
        tags: [ { name: nelmio_alice.faker.provider } ]
    App\Utils\Faker\Processor\AppUserProcessor:
        tags: [ { name: nelmio_alice.faker.provider } ]

    App\Security\MercureJWTProvider:
        arguments:
            $jwtPassphrase: '%env(MERCURE_JWT_PASSPHRASE)%'

    Monolog\Processor\PsrLogMessageProcessor:
        tags: { name: monolog.processor, handler: sentry }

### >>> Doctrine Listener
### <<< Doctrine Listener

### >>> Exceptions subscribers

    api_mercure_exception_subscriber:
        class: App\EventSubscriber\ExceptionSubscriber\ApiMercureExceptionSubscriber
        arguments: ['@App\Utils\Exceptions\LoggerException']
        tags:
            - { name: monolog.logger, channel: 'api_mercure' }

### <<< Exceptions subscribers

### >>> Param Converter


### <<< Param Converter
